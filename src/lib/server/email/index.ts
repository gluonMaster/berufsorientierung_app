/**
 * Email Transport Module
 *
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ MailChannels HTTP API
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–∏—Å–µ–º (sendEmail)
 * - –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º (sendBulkEmails)
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ DKIM –ø–æ–¥–ø–∏—Å–∏
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–æ–≤/–æ—à–∏–±–æ–∫
 *
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä: MailChannels (https://api.mailchannels.net/tx/v1/send)
 */

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DKIM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
interface DKIMConfig {
	domain: string;
	selector: string;
	privateKey: string;
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –¥–ª—è MailChannels API
 */
interface MailChannelsPayload {
	personalizations: Array<{
		to: Array<{ email: string; name?: string }>;
	}>;
	from: {
		email: string;
		name?: string;
	};
	subject: string;
	content: Array<{
		type: string;
		value: string;
	}>;
	headers?: {
		'Reply-To'?: string;
	};
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π payload —Å DKIM
 */
interface MailChannelsPayloadWithDKIM extends MailChannelsPayload {
	personalizations: Array<{
		to: Array<{ email: string; name?: string }>;
		dkim_domain?: string;
		dkim_selector?: string;
		dkim_private_key?: string;
	}>;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email
 */
interface SendEmailResult {
	success: boolean;
	error?: string;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export interface BulkEmailResult {
	success: number;
	failed: number;
	errors: string[];
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ email –∞–¥—Ä–µ—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "Name <email@example.com>" –∏–ª–∏ "email@example.com"
 */
function parseEmailAddress(emailString: string): { email: string; name?: string } {
	const match = emailString.match(/^(.+?)\s*<(.+?)>$/);
	if (match) {
		return {
			name: match[1].trim(),
			email: match[2].trim(),
		};
	}
	return { email: emailString.trim() };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ DKIM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ environment variables
 */
function getDKIMConfig(env: App.Platform['env']): DKIMConfig | null {
	const domain = env.DKIM_DOMAIN;
	const selector = env.DKIM_SELECTOR;
	const privateKey = env.DKIM_PRIVATE_KEY;

	if (!domain || !selector || !privateKey) {
		return null;
	}

	return { domain, selector, privateKey };
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ email —á–µ—Ä–µ–∑ MailChannels
 *
 * @param to - Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
 * @param subject - –¢–µ–º–∞ –ø–∏—Å—å–º–∞
 * @param text - –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (plain text)
 * @param env - Environment variables (Cloudflare Workers)
 *
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: env –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (Cloudflare Workers best practice)
 * –í Workers –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ process.env, –ø–æ—ç—Ç–æ–º—É env –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —è–≤–Ω–æ
 * —á–µ—Ä–µ–∑ event.platform.env –∏–∑ RequestEvent. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —á–∏—Å—Ç–æ–π –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π.
 *
 * @returns Promise<void>
 *
 * @throws Error –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
 *
 * @example
 * // –í API route (SvelteKit)
 * export async function POST({ platform }: RequestEvent) {
 *   await sendEmail(
 *     'user@example.com',
 *     'Welcome!',
 *     'Hello, welcome to our platform!',
 *     platform!.env
 *   );
 * }
 */
export async function sendEmail(
	to: string,
	subject: string,
	text: string,
	env: App.Platform['env']
): Promise<void> {
	const MAILCHANNELS_ENDPOINT = 'https://api.mailchannels.net/tx/v1/send';

	// –ü–∞—Ä—Å–∏–Ω–≥ FROM –∞–¥—Ä–µ—Å–∞
	const from = parseEmailAddress(env.EMAIL_FROM);

	// –ü–∞—Ä—Å–∏–Ω–≥ TO –∞–¥—Ä–µ—Å–∞
	const toAddress = parseEmailAddress(to);

	// –ë–∞–∑–æ–≤—ã–π payload
	const payload: MailChannelsPayloadWithDKIM = {
		personalizations: [
			{
				to: [toAddress],
			},
		],
		from,
		subject,
		content: [
			{
				type: 'text/plain',
				value: text,
			},
		],
	};

	// –î–æ–±–∞–≤–ª—è–µ–º Reply-To –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
	if (env.EMAIL_REPLY_TO) {
		payload.headers = {
			'Reply-To': env.EMAIL_REPLY_TO,
		};
	}

	// –î–æ–±–∞–≤–ª—è–µ–º DKIM –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
	const dkimConfig = getDKIMConfig(env);
	if (dkimConfig) {
		payload.personalizations[0].dkim_domain = dkimConfig.domain;
		payload.personalizations[0].dkim_selector = dkimConfig.selector;
		payload.personalizations[0].dkim_private_key = dkimConfig.privateKey;
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ MailChannels
	try {
		const response = await fetch(MAILCHANNELS_ENDPOINT, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(payload),
		});

		if (!response.ok) {
			const errorText = await response.text();
			console.error('[Email] MailChannels error:', {
				status: response.status,
				statusText: response.statusText,
				body: errorText,
				to,
				subject,
			});
			throw new Error(`Failed to send email: ${response.status} ${response.statusText}`);
		}

		console.log('[Email] Successfully sent to:', to);
	} catch (error) {
		console.error('[Email] Failed to send email:', error);
		throw error;
	}
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ email —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * (–Ω–µ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
 */
async function sendSingleEmail(
	to: string,
	subject: string,
	text: string,
	env: App.Platform['env']
): Promise<SendEmailResult> {
	try {
		await sendEmail(to, subject, text, env);
		return { success: true };
	} catch (error) {
		const errorMessage = error instanceof Error ? error.message : String(error);
		return {
			success: false,
			error: `${to}: ${errorMessage}`,
		};
	}
}

/**
 * –ü–∞—É–∑–∞ (–¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞)
 */
function sleep(ms: number): Promise<void> {
	return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
 *
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–∞ –ø–æ—Ä—Ü–∏—è–º–∏ (—á–∞–Ω–∫–∞–º–∏) —Å –ø–∞—É–∑–∞–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏,
 * —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API –∏ –Ω–µ —Å–æ–∑–¥–∞—Ç—å —á—Ä–µ–∑–º–µ—Ä–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É.
 *
 * @param recipients - –ú–∞—Å—Å–∏–≤ email –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
 * @param subject - –¢–µ–º–∞ –ø–∏—Å—å–º–∞
 * @param text - –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (plain text)
 * @param env - Environment variables (Cloudflare Workers)
 *
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: env –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (Cloudflare Workers best practice)
 * –í Workers –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ process.env, –ø–æ—ç—Ç–æ–º—É env –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —è–≤–Ω–æ
 * —á–µ—Ä–µ–∑ event.platform.env –∏–∑ RequestEvent.
 *
 * @returns Promise<BulkEmailResult> - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:
 *   - success: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
 *   - failed: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
 *   - errors: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç—á–∏–Ω–≥–∞ (–∏–∑ env):
 * - EMAIL_BULK_CHUNK (default: 50) - —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
 * - EMAIL_BULK_PAUSE_MS (default: 60000 = 1 –º–∏–Ω—É—Ç–∞) - –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –≤ –º—Å
 *
 * üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (50 –ø–∏—Å–µ–º —Å –ø–∞—É–∑–æ–π 1 –º–∏–Ω)
 * –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ blacklist.
 *
 * @example
 * // –í API route
 * export async function POST({ platform }: RequestEvent) {
 *   const result = await sendBulkEmails(
 *     ['user1@example.com', 'user2@example.com'],
 *     'Newsletter',
 *     'Hello everyone!',
 *     platform!.env
 *   );
 *   console.log(`Sent: ${result.success}, Failed: ${result.failed}`);
 *   if (result.errors.length > 0) {
 *     console.error('Errors:', result.errors);
 *   }
 * }
 */
export async function sendBulkEmails(
	recipients: string[],
	subject: string,
	text: string,
	env: App.Platform['env']
): Promise<BulkEmailResult> {
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç—á–∏–Ω–≥–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
	const chunkSize = parseInt(env.EMAIL_BULK_CHUNK || '50', 10);
	const pauseMs = parseInt(env.EMAIL_BULK_PAUSE_MS || '60000', 10);

	console.log('[Email Bulk] Starting bulk send:', {
		totalRecipients: recipients.length,
		chunkSize,
		pauseMs,
		subject,
	});

	let successCount = 0;
	let failedCount = 0;
	const errors: string[] = [];

	// –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
	for (let i = 0; i < recipients.length; i += chunkSize) {
		const chunk = recipients.slice(i, i + chunkSize);
		const chunkNumber = Math.floor(i / chunkSize) + 1;
		const totalChunks = Math.ceil(recipients.length / chunkSize);

		console.log(
			`[Email Bulk] Processing chunk ${chunkNumber}/${totalChunks} (${chunk.length} emails)`
		);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞ –≤ —á–∞–Ω–∫–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		const results = await Promise.all(
			chunk.map((recipient) => sendSingleEmail(recipient, subject, text, env))
		);

		// –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		for (const result of results) {
			if (result.success) {
				successCount++;
			} else {
				failedCount++;
				if (result.error) {
					errors.push(result.error);
				}
			}
		}

		console.log(`[Email Bulk] Chunk ${chunkNumber}/${totalChunks} completed:`, {
			success: results.filter((r) => r.success).length,
			failed: results.filter((r) => !r.success).length,
		});

		// –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
		if (i + chunkSize < recipients.length) {
			console.log(`[Email Bulk] Pausing for ${pauseMs}ms before next chunk...`);
			await sleep(pauseMs);
		}
	}

	console.log('[Email Bulk] Bulk send completed:', {
		total: recipients.length,
		success: successCount,
		failed: failedCount,
	});

	return {
		success: successCount,
		failed: failedCount,
		errors,
	};
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
export type { SendEmailResult, DKIMConfig };
